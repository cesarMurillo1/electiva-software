import tkinter
from tkinter import *
from tkinter import ttk, messagebox
import tkinter as tk
import numpy as np

"""-2 -1 2
1 1 1
-1 4 1

4,3,2"""
def salir():
    cuadro.destroy()

def borrar():
    #MatrizEntrada.delete(1.0, END)
    #vectorV.set("")
    resulUnoVar.set("")
    resulDosVar.set("")
    resulTresVar.set("")
    resulCuatroVar.set("")

def ordenar_2(msj):
    lista = msj.split(sep='\n')
    lista_final = []
    for x in lista:
        lista_final.append(x)
    print("Lista 1: ", lista_final)
    return lista_final

def to_matriz(msj):
    mat = []
    for x in msj:
        fila = x.split(sep=' ')
        mat.append(fila)
    return mat

def to_float(msj):
    mat = []
    aux = []
    for x in msj:
        for y in x:
            aux.append(float(y))
        mat.append(aux.copy())
        aux.clear()
    return mat


def saberDeCuantoPorCuantoEs(matriz):
    aux = 0
    filas = len(matriz)
    for i in range(0, len(matriz)):
        if aux < len(matriz[i]):
            aux = len(matriz[i])

    return aux, filas


def rellenarLosEspacios(matriz):
    numerosFaltan, filas = saberDeCuantoPorCuantoEs(matriz)
    for i in range(0, len(matriz)):
        if numerosFaltan > len(matriz[i]):
            matriz[i].append(0)
    return matriz





def solucionar_ecuacion_lineal(mat, b):
    a = np.array(mat)
    v_sol = np.array(b)
    x = np.linalg.solve(a, v_sol)
    final = retornar_impresion_ecu_lineal(x)
    print(final)
    print(len(final))
    return final

def retornar_impresion_ecu_lineal(arreglo):
    msj = []
    for x in range(len(arreglo)):
        msj.append(str(arreglo[x]))
    return msj

def delimitaComas(msj):
    msj1=msj.split(sep='\n')
    lista_final = []
    for x in msj1:
        lista_final.append(float(x))
    return lista_final

def resolver_ecu_lineales():

    matriz = delimitaCuadros()
    vectorSolucion=delimitaCuadrosVector()
    m = ordenar_2(matriz)
    a = to_matriz(m)
    print(a)
    t = to_float(a)
    mat = rellenarLosEspacios(t)
    b = delimitaComas(vectorSolucion)
    x = solucionar_ecuacion_lineal(mat, b)

    if len(x) == 2:
        xStrUno = str(x[0])
        xStrDos = str(x[1])
        resulUnoVar.set(xStrUno)
        resulDosVar.set(xStrDos)
    if len(x) == 3:
        xStrUno = str(x[0])
        xStrDos = str(x[1])
        xStrTres = str(x[2])
        resulUnoVar.set(xStrUno)
        resulDosVar.set(xStrDos)
        resulTresVar.set(xStrTres)
    if len(x) == 4:
        xStrUno = str(x[0])
        xStrDos = str(x[1])
        xStrTres = str(x[2])
        xStrCuatro = str(x[3])
        resulUnoVar.set(xStrUno)
        resulDosVar.set(xStrDos)
        resulTresVar.set(xStrTres)
        resulCuatroVar.set(xStrCuatro)



#interfaz
cuadro = Tk()
cuadro.title("Calculadora conversión de matrices")
cuadro.geometry("740x450")

frameUno = tkinter.Frame(cuadro, width=300, height=150)
# frame.config(bg="green")
frameUno.grid(row=1, column=0)

frameDos = tkinter.Frame(cuadro, width=400, height=100)
# frame.config(bg="green")
frameDos.grid(row=2, column=0)
frameTres = tkinter.Frame(cuadro, width=400, height=100)
# frame.config(bg="green")
frameTres.grid(row=4, column=0)

frameCuatro = tkinter.Frame(cuadro, width=400, height=100)
# frame.config(bg="green")
frameCuatro.grid(row=3, column=0)
frameQuinto = tkinter.Frame(cuadro, width=400, height=100)
# frame.config(bg="green")
frameQuinto.grid(row=0, column=0)
# Labels nombres
metodo = Label(frameQuinto, text="SISTEMA DE ECUCIONES LINEALES", width="80", font=("helvetica", 12, "bold"),padx=5, pady=5, bg="LightSkyBlue1", fg="black", borderwidth=2, relief="groove")
metodo.grid(row=0, column=0)

matriz = Label(frameUno, text="matriz", width="14", font=("helvetica", 12, "bold"),padx=5, pady=5, bg="ivory2", fg="black", borderwidth=2, relief="groove")
matriz.grid(row=0, column=0)

vector = Label(frameUno, text="vector", width="17", font=("helvetica", 12, "bold"),padx=5, pady=5, bg="ivory2", fg="black", borderwidth=2, relief="groove")
vector.grid(row=0, column=1)

#label resultados
x1Label = Label(frameTres, text="x1", width="17", font=("helvetica", 12, "bold"),
                     padx=5, pady=5, bg="ivory2", fg="black", borderwidth=2, relief="groove")
x1Label.grid(row=0, column=0)

x2Label = Label(frameTres, text="x2", width="17", font=("helvetica", 12, "bold"),
                     padx=5, pady=5, bg="ivory2", fg="black", borderwidth=2, relief="groove")
x2Label.grid(row=1, column=0)

x3Label = Label(frameTres, text="x3", width="17", font=("helvetica", 12, "bold"),
                     padx=5, pady=5, bg="ivory2", fg="black", borderwidth=2, relief="groove")
x3Label.grid(row=2, column=0)

x4Label = Label(frameTres, text="x4", width="17", font=("helvetica", 12, "bold"),
                     padx=5, pady=5, bg="ivory2", fg="black", borderwidth=2, relief="groove")
x4Label.grid(row=3, column=0)




#espacios de entradas
matrizV = tkinter.StringVar()
vectorV = tkinter.StringVar()
resultadoV = tkinter.StringVar()
resulUnoVar = tkinter.StringVar()
resulDosVar = tkinter.StringVar()
resulTresVar = tkinter.StringVar()
resulCuatroVar = tkinter.StringVar()
tamanoArray = []
text_var = []
entries = []
entriesFinal = []
variasMatrices = []
text_var2 = []
entries2 = []
entriesFinal2 = []
variasMatrices2 = []

#crea los cuadros del vector
def crearBoxesVector():
    print(tamanoArray)
    size = int(tamanoArray[0])

    frameBoxes = tkinter.Frame(frameUno, width=800, height=60, highlightbackground="gray", highlightthickness=1)

    framesArray.append(frameBoxes)

    frameBoxes.grid(row=1,column=1, padx=10)
    x2 = 0
    y2 = 0
    matriz = []
    for y in range(size):
        text_var2.append([])
        entries2.append([])
        fila = []
        columna = []

        for x in range(size-(size-1)):
            text_var2[y].append(StringVar())
            entryX = Entry(frameBoxes, textvariable=text_var2[y][x], width=5, font=15)
            entries2[y].append(entryX)
            entries2[y][x].grid(column=x + x2, row=y + y2, padx=10, pady=10)
            # entries.append(entryX)
            fila.append(entryX)
            x2 += 30
        columna.append(fila)
        matriz.append(columna)
        # append your StringVar and Entry

        y2 += 30
        x2 = 0

        entriesFinal2.append(matriz)

    def cerrarMenu():
        for i in framesArray:
            i.destroy()
        btnCrearMatriz = Button(cuadro, text="+", width="4", font=("helvetica", 12, "bold"),
                                bg="LightSkyBlue1", fg="black", command=abrirCreador)
        btnCrearMatriz.place(x=300, y=70)
        botonesArray.append(btnCrearMatriz)
        entries.clear()
        text_var.clear()
        entries2.clear()
        text_var2.clear()
        tamanoArray.clear()
        variasMatrices.clear()
        entriesFinal.clear()
        entriesFinal2.clear()


    btnCrearBoxes = Button(frameBoxes, text="Cerrar", width="7", font=("helvetica", 12, "bold"),
                            bg="LightSkyBlue1", fg="black", command=cerrarMenu)
    btnCrearBoxes.grid(column=1,row=0, padx= 20)





framesArray = []
#crea los cuadros de la matriz
def crearBoxes():
    size = int(tamanoArray[0])
    frameBoxes = tkinter.Frame(frameUno, width=800, height=60, highlightbackground="gray", highlightthickness=1)

    framesArray.append(frameBoxes)

    frameBoxes.grid(row=1,column=0, pady=5)
    x2 = 0
    y2 = 0
    matriz = []
    for y in range(size):
        text_var.append([])
        entries.append([])
        fila = []
        columna = []

        for x in range(size):
            text_var[y].append(StringVar())
            entryX = Entry(frameBoxes, textvariable=text_var[y][x], width=5, font=15)
            entries[y].append(entryX)
            entries[y][x].grid(column=x + x2, row=y + y2, padx=10, pady=10)
            # entries.append(entryX)
            fila.append(entryX)
            x2 += 30
        columna.append(fila)
        matriz.append(columna)
        # append your StringVar and Entry

        y2 += 30
        x2 = 0

        entriesFinal.append(matriz)

botonesArray = []
#abre el menu para ingresar el tamano de la matriz y vector
def abrirCreador():
    ocultar()
    frameCreador = tkinter.Frame(frameUno, width=200, height=20)
    frameCreador.config()
    frameCreador.grid(column=0, row=1)

    labelX = Label(frameCreador, text="tamaño: ", width="14", height="1", font=("helvetica", 13, "bold"),
                   padx=5, pady=5, bg="LightSkyBlue1", fg="black", borderwidth=1, relief="ridge")
    labelX.grid(column=0, row=0, pady= 10)

    numParticionesX = tkinter.IntVar()

    funcCampoTextoX = Entry(frameCreador, textvariable=numParticionesX, font=10, width=10)
    funcCampoTextoX.grid(column=0, row=1)
    
#guarda el tamano de todo y llama los creadores
    def guardarTamano():
        tamano = funcCampoTextoX.get()
        tamanoArray.append(tamano)
        frameCreador.destroy()
        crearBoxes()
        crearBoxesVector()

    btnCrearBoxes = Button(frameCreador, text="Ok", width="7", font=("helvetica", 12, "bold"),
                            bg="LightSkyBlue1", fg="black", command=guardarTamano)
    btnCrearBoxes.grid(column=0,row=2, pady=10)
#concatena la matriz y agrega los espacios para la funcion de jordan
def delimitaCuadros():
    entriesFinal,variasMatrices=matrizResultado()
    concatenacion=""
    numero=0
    filas=0
    while filas<len(entriesFinal):
        while numero<len(entriesFinal):
            concatenacion=concatenacion+variasMatrices[0][filas][numero]
            if numero<=len(entriesFinal)-2:
                concatenacion=concatenacion+" "
            numero=numero+1
        if filas<=len(entriesFinal)-2:
            concatenacion=concatenacion+"\n"
        filas=filas+1
        numero=0
    return concatenacion
#concatena los elementos del vector y agrega los espacios para la funcion de jordan
def delimitaCuadrosVector():
    entriesFinal,variasMatrices=vectorResultado()
    concatenacion=""
    numero=0
    filas=0
    while filas<len(entriesFinal):
        concatenacion=concatenacion+variasMatrices[0][filas][0]
        if filas<=len(entriesFinal)-2:
            concatenacion=concatenacion+"\n"
        filas=filas+1
    return concatenacion

#retorna la matriz
def matrizResultado():
    ultimaMatriz = len(entriesFinal)-1
    filas =len(entriesFinal[ultimaMatriz][0][0])
    columnas = len(entriesFinal[ultimaMatriz])
    matriz = []
    for i in range(columnas):
        matriz.append([])
        for j in range(filas):
            matriz[i].append(text_var[i][j].get())
    variasMatrices.append(matriz)
    return(entriesFinal,variasMatrices)
#retorna el vector
def vectorResultado():
    ultimaMatriz = len(entriesFinal2)-1
    filas =len(entriesFinal2[ultimaMatriz][0][0])
    columnas = len(entriesFinal2[ultimaMatriz])
    matriz = []
    for i in range(columnas):
        matriz.append([])
        for j in range(filas):
            matriz[i].append(text_var2[i][j].get())
    variasMatrices2.append(matriz)
    return(entriesFinal2,variasMatrices2)

#oculta la matriz
def ocultar():
    for i in botonesArray:
        i.destroy()
    botonesArray.clear()

#boton para agregar matriz y vector
btnCrearMatriz = Button(cuadro, text="+", width="4", font=("helvetica", 12, "bold"),
                       bg="LightSkyBlue1", fg="black", command=abrirCreador)
botonesArray.append(btnCrearMatriz)
btnCrearMatriz.place(x=300, y=70)

#resultados
resultadoUnoEntrada = Entry(frameTres, textvariable=resulUnoVar, font=10, width=30, state="readonly")
resultadoUnoEntrada.grid(row=0, column=1)

resultadoDosEntrada = Entry(frameTres, textvariable=resulDosVar, font=10, width=30, state="readonly")
resultadoDosEntrada.grid(row=1, column=1)

resultadoTresEntrada = Entry(frameTres, textvariable=resulTresVar, font=10, width=30, state="readonly")
resultadoTresEntrada.grid(row=2, column=1)

resultadoCuatroEntrada = Entry(frameTres, textvariable=resulCuatroVar, font=10, width=30, state="readonly")
resultadoCuatroEntrada.grid(row=3, column=1)

"""resultadoEntrada = Text(cuadro, width=28, height=8, font=15)
resultadoEntrada.place(x=200, y=270)"""

#botones

btnCalcular = Button(frameCuatro, text="Calcular", width="10", font=("helvetica", 12, "bold"),
                     bg="LightSkyBlue1", fg="black", command=resolver_ecu_lineales)
btnCalcular.grid(row=0, column=0)


btnBorrar = Button(frameCuatro, text="Borrar", width="10", font=("helvetica", 12, "bold"),
                   bg="LightSkyBlue1", fg="black", command=borrar)
btnBorrar.grid(row=0, column=2)

btnSalir = Button(frameCuatro, text="Salir", width="10", font=("helvetica", 12, "bold"),
                  bg="LightSkyBlue1", fg="black", command=salir)
btnSalir.grid(row=0, column=3)

cuadro.mainloop()